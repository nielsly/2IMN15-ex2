/****************
 * This code was automatically generated by lwm2m_codegen.
 ****************/
package org.eclipse.leshan.client.demo;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Random;
import java.util.List;
import java.util.Arrays;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.Scanner;

import org.eclipse.leshan.client.servers.ServerIdentity;
import org.eclipse.leshan.client.resource.BaseInstanceEnabler;
import org.eclipse.leshan.core.model.ResourceModel.Type;
import org.eclipse.leshan.core.model.ObjectModel;
import org.eclipse.leshan.core.node.LwM2mResource;
import org.eclipse.leshan.core.request.argument.Arguments;
import org.eclipse.leshan.core.response.ExecuteResponse;
import org.eclipse.leshan.core.response.ReadResponse;
import org.eclipse.leshan.core.response.WriteResponse;
import org.eclipse.leshan.core.util.NamedThreadFactory;

//
// Some classes for creating a GUI.
//
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JFrame;
import javax.swing.JComboBox;
import javax.swing.WindowConstants;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.EventQueue;

public class PresenceDetector extends BaseInstanceEnabler {
    static final int OBJECT_ID_PRESENCE_DETECTOR = 33000;
    static final int OBJECT_ID = 33000;
    // Static values for resource items
    private static final int RES_POWER = 30000;
    private static final int RES_PRESENCE = 30001;
    private static final List<Integer> supportedResources =
     Arrays.asList(
             RES_POWER
           , RES_PRESENCE
           );
    // Variables storing current values.

    private boolean vPower = false;
    private boolean vPresence = false;

    //
    // 2IMN15:  TODO  :  fill in
    //
    // Add state variables for interaction with the user (GUI, CLI, sensor.)
    
    
    public PresenceDetector() {
	//
	// 2IMN15:  TODO  :  fill in
	//
	// Create an interface to enable presence detection
	// Options:
	// *  GUI     (see DemandResponse.java for an Swing/AWT example)
	// *  external application
	// *  ...
	//
	// Call "setPresence(bool)" to inform observers.
    }

    @Override
    public synchronized ReadResponse read(ServerIdentity identity, int resourceId) {
	switch (resourceId) {
	case RES_POWER:
	    return ReadResponse.success(resourceId, vPower);
	case RES_PRESENCE:
	    return ReadResponse.success(resourceId, vPresence);
	default:
	    return super.read(identity, resourceId);
	}
    }
    
    @Override
    public WriteResponse write(ServerIdentity identity, boolean replace, int resourceId, LwM2mResource value) {
	switch (resourceId) {
	case RES_POWER:
	    // vPower = (Boolean) value.getValue();
	    // fireResourceChange(resourceId);
	    setPower((Boolean) value.getValue());
	    return WriteResponse.success();
	default:
	    return super.write(identity, replace, resourceId,value);
	}
    }

    @Override
    public synchronized ExecuteResponse execute(ServerIdentity identity, int resourceId, Arguments arguments) {
	switch (resourceId) {
	default:
	    return super.execute(identity, resourceId,arguments);
	}
    }
    
    @Override
    public List<Integer> getAvailableResourceIds(ObjectModel model) {
	return supportedResources;
    }

    private synchronized void setPower(boolean value) {
	if (vPower != value) {
	    vPower = value;
	    fireResourceChange(RES_POWER);
	}
    }
    
    private synchronized void setPresence(boolean value) {
	if (vPresence != value) {
	    vPresence = value;
	    fireResourceChange(RES_PRESENCE);
	}
    }
    
}
